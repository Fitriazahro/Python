# -*- coding: utf-8 -*-
"""FITRIA_Summit_M5P4_Fungsi dan Big O Notation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tUpidJ059efQsOgwjJLPl7D9OFMM1oK9

# **Fungsi**
"""

def nama_fungsi(arg1, arg2, ...):
  # isi fungsi

def fungsi_dengan_pengembalian(arg1, arg2, ...):
  # isi fungsi
  return 'sesuatu'

# Deklarasi Fungsi
def cetak(x):
  print(x)

# Memanggil Fungsi
cetak("HOLA")

# Deklarasi Fungsi dengan pengembalian
def tambah(a, b):
  return a / b;

# Memanggil Fungsi
print(tambah(2, 3))

"""# **Method**"""

class NamaClass:
  def nama_method(arg1, arg2, ...):
    # isi method

# Deklarasi Object (Class)
class Kucing(object):
  def meong(self):
    print("meeooong")

# Memanggil method
cat = Kucing()
cat.meong()

"""# **Lambda Expression**"""

# Lambda expression
tambah = lambda a, b : (a+b)
tambah(2, 3)

"""# **Object Oriented Programming**

## **Encapsulation**
"""

nama = "cemong"
usia = 1
warna = "putih coklat muda"
jenis = "anggora"

def meongg():
  print("meeeoonnggg... ")

def info_kucing(nama, usia, warna, jenis):
  print(f"nama: {nama}, usia: {usia}, warna: {warna}, jenis: {jenis}")

info_kucing(nama, usia, warna, jenis)


class Kucing:
  def __init__(self, nama, usia, warna, jenis):
    self.nama = nama
    self.usia = usia
    self.warna = warna
    self.jenis = jenis

  def myfunc(self):
    print("Hello my name is " + self.nama)
  
  def meong(self):
    print("meeeoonnggg... ")

  def info(self):
    print(f"nama: {self.nama}, usia: {self.usia}, warna: {self.warna}, jenis: {self.jenis}")


kucing1 = Kucing("cemong", 1, "putih coklat muda", "anggora")

kucing1.info() # akses method

kucing1.nama # akses atribut

"""## **Abstraction**"""

# Memanggil method dari objek tanpa harus mengetahui cara kerja method
kucing1.myfunc()

"""## **Inheritence**"""

class Binatang(object):
  def __init__(self, nama, usia, jenis, mamalia):
    self.nama = nama
    self.usia = usia
    self.jenis = jenis
    self.mamalia = mamalia

  def tidur(self, durasi):
    for x in range(durasi):
      print("ddrrr... ddrrr... ")

  def info(self):
    print(f"nama: {self.nama}, usia: {self.usia}, jenis: {self.jenis}, mamalia: {self.mamalia}")


binatang1 = Binatang("cemong", 1, "omnivora", True)

binatang1.info()

class Kucing(Binatang):
  def __init__(self,  nama, usia, jenis, mamalia, warna, jenis_kucing):
    super().__init__(nama, usia, jenis, mamalia)
    self.warna = warna
    self.jenis_kucing = jenis_kucing
  
  def meong(self):
    print("meeeonnggg")

  def info_kucing(self):
    print(f"warna: {self.warna}, jenis kucing: {self.jenis_kucing}")

cat1 = Kucing("cemong", 1, "omnivora", True, "putih coklat muda", "anggora")

cat1.info()
cat1.info_kucing()
cat1.tidur(6)

"""## **Polymorphism**"""

class Ikan(Binatang):
  def __init__(self,  nama, usia, jenis, mamalia, warna, jenis_air, jenis_ikan):
    super().__init__(nama, usia, jenis, mamalia)
    self.warna = warna
    self.jenis_air = jenis_air
    self.jenis_ikan = jenis_ikan
  
  def berenang(self, durasi):
    print("wushh... wush... ")

  def info_ikan(self):
    print(f"warna: {self.warna}, jenis ikan: {self.jenis_ikan}, jenis air: {self.jenis_air}")

fish1 = Ikan("Jago", 2, "omnivora", False, "Merah Putih", "Tawar", "Cupang")

fish1.info()

fish1.info_ikan()
fish1.berenang(5)

"""## **Activity OOP**

Buatlah 3 OOP beserta turunannya dari objek sekitar, buat ulang seperti yang diatas (encapsulation, abstaction, inheritance, polymorphism)

**encapsulation**
"""

tipe = "honda"
tahun = 2021
warna = "hitam"
jenis = "matic"

def brem():
  print("breemm... ")

def info_motor(tipe, tahun, warna, jenis):
  print(f"tipe: {tipe}, tahun: {tahun}, warna: {warna}, jenis: {jenis}")

info_motor(tipe, tahun, warna, jenis)


class motor:
  def __init__(self, tipe, tahun, warna, jenis):
    self.tipe = tipe
    self.tahun = tahun
    self.warna = warna
    self.jenis = jenis

  def myfunc(self):
    print("motor ini berjenis " + self.tipe)
  
  def bremm(self):
    print("bremm... ")

  def info(self):
    print(f"tipe: {self.tipe}, tahun: {self.tahun}, warna: {self.warna}, jenis: {self.jenis}")


motor1 = motor("honda", 2021, "hitam", "matic")
motor1.info()

"""**abstraction**"""

motor1.myfunc()

"""**inheritance**"""

class kendaraan(object):
  def __init__(self, tipe, tahun, warna, jenis):
    self.tipe = tipe
    self.tahun = tahun
    self.warna = warna
    self.jenis = jenis

  def rem(self, suara):
    for x in range(suara):
      print("ctttt....ctttt")

  def info(self):
    print(f"tipe: {self.tipe}, tahun: {self.tahun}, jenis: {self.jenis}, warna: {self.warna}")


kendaraan1 = kendaraan("honda", 2021, "matic", "hitam")
kendaraan1.info()

class motor(kendaraan):
  def __init__(self,  tipe, tahun, jenis,  warna, merk):
    super().__init__(tipe, tahun, jenis, warna)
    self.merk = merk
  
  def bremm(self):
    print("bremm")

  def info_motor(self):
    print(f"merk: {self.merk}")

mot1 = motor("honda", 2021, "matic", "hitam", "beat")

mot1.info()
mot1.info_motor()
mot1.rem(3)

"""**Polymorphism**"""

class roda4(kendaraan):
  def __init__(self,  tipe, tahun, jenis, warna, jenis_roda4):
    super().__init__(tipe, tahun, jenis, warna)
    self.jenis_roda4 = jenis_roda4
 

  def dipakai(self, laju):
    print("bremm... brem... ")

  def info_roda4(self):
    print(f"jenis kendaraan roda empat: {self.jenis_roda4}")

roda4_1 = roda4("honda", 2021, "hitam","matic", "mobil")

roda4_1.info()
roda4_1.info_roda4()
roda4_1.dipakai(5)

"""# **Time Complexity**
## Activity 

Hitung time complexity dengan bigO Notation pada algoritma berikut:

* Tidak perlu di run
"""

# 1

arr = [1, 2, 3, 4, 5] # O(1)

print(arr[0]) # O(1)
print(arr[1]) # O(1)

# O(1) karena konstan. Jumlah input yang diberikan tidak berpengaruh pada runtime

# 2

print(arr[2])   # O(1)
for number in arr: # O(n)
  print(number)
print(arr[1]) # O(1)
print(arr[2]) # O(1)

# O(n) karena linear. O(n) saja karena worst case

# 3

arr2 = [6, 7, 8, 9, 10] # O(1)

for number in arr: # O(n)
  print(number)
for number in arr2: # O(n)
  print(number)
print(arr2[4]) # O(1)

# O(n) karena linear. O(n) merupakan worst case

# 4

print(arr2[1]) # O(1)
for number in arr: # O(n)
  print(number)
for number in arr: # O(n)
  print(number)

# O(n) karena linear. O(n) merupakan worst case

# 5

for number in arr: # O(n)
  for number2 in arr2: # O(n)
    print(number+number2)
print(arr[1]+arr2[1]) # O(1)
print(arr2[2]) # O(1)

# O(n^2) karena ada fgs linear dalam linear, for didalam for

# 6 

for number in arr: # O(n)
  for number2 in arr: # O(n)
    print(number+number2)
print(arr) # O(1)

# O(n^2) karena ada fungsi linear dalam linear, for didalam for

# 7 

for number in arr: # O(n)
  for number2 in arr2: # O(n)
    for number3 in arr: # O(n)
      print(number+number2+number3)
print(arr[1]) # O(1)
print(arr2[2]) # O(1)
print(arr2[3]) # O(1)

# O(n^3) karena ada for didalam for didalam for

# 8

for number in arr: # O(n)
  print(number)
print(arr2) # O(1)
for number in arr: # O(n)
  for number2 in arr2: # O(n)
    print(number+number2)
print(arr) # O(1)

# O(n^2) karena ada for didalam for. O(n^2) merupakan worst case

# 9 

# algoritma bubble sort
def bubblesort(nilai):
  for i in range(len(nilai)-1, 0, -1):
    for j in range(i):
      if nilai[j] > nilai[j+1]:
        tmp = nilai[j]
        nilai[j] = nilai[j+1]
        nilai[j+1] = tmp
  
  return nilai

listku = [2,2,6,1,9]
print("Data acak : ", listku)
print()
print("Ascending: ", bubblesort(listku))

# O(n^2) for didalam for

# 10

# algoritma linear search
def cari(number,cariangka):
  temu = 0
  while temu != len(angka):
    if angka[temu] == cariangka:
      hasil = temu
    temu = temu+1
  return hasil

angka = [2,3,1,4,2,5,7,19]
search = int(input("Berapa angka yang Anda cari ? "))

hsl = cari(angka,search)
print("Angka", search, "ada pada urutan ke-", hsl+1)

# O(n) karena linear, looping satu kali

# 11

# algoritma binary search
cari = False
angka = [3,5,1,2,4]   
a = 0  
b = len(angka)-1  
angka.sort() 
while a <= b and not cari:
    c = (a + b) // 2    
    if angka[c] == cariangka:
       cari = True
    else:
        if cariangka < angka[c]:
            b = c - 1
        else:
            a = c + 1

cariangka = int(input('Berapa angka yang ingin Anda cari?')) 

if cari:
    print('Angka',cariangka, "ditemukan")

# O(log n)

def cetak(x):
  print(x)

cetak("yusuf")

cetakk = lambda x : print(x)

cetakk("yusuf")